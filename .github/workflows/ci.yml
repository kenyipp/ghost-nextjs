name: CI

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - master
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - master

permissions:
  contents: read
  pull-requests: read

jobs:
  #
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      #
      - name: Checkout
        uses: actions/checkout@v3
      #
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #
      - name: Install dependencies
        run: yarn install

  #
  spell-check:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
      #
      - name: Checkout
        uses: actions/checkout@v3
      #
      - name: Install CSpell
        run: npm install -g cspell@latest
      #
      - name: Check Spelling
        run: cspell '**'

  #
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [install-dependencies]
    steps:
      #
      - name: Checkout
        uses: actions/checkout@v3
      #
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #
      - name: Lint program
        run: npm run lint

  #
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [spell-check, lint]
    steps:
      #
      - name: Checkout
        uses: actions/checkout@v3
      #
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      #
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      #
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      #
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
